/** \mainpage Driver Overview
  *
  * \section section_drv_info Driver Information
  * This Sensor Controller Interface driver has been generated by the Texas Instruments Sensor Controller
  * Studio tool:
  * - <b>Project name</b>:     IMS IMUv6 Sensor Reader
  * - <b>Project file</b>:     Z:/repository/OpenAXES/workspace/OpenAXES/SensorController/IMUv6_all_sensors.scp
  * - <b>Code prefix</b>:      -
  * - <b>Operating system</b>: TI-RTOS
  * - <b>Tool version</b>:     2.9.0.208
  * - <b>Tool patches</b>:     None
  * - <b>Target chip</b>:      CC2652R1F, package QFN48 7x7 RGZ, revision E (2.1) or F (3.0)
  * - <b>Created</b>:          2022-06-21 17:28:19.282
  * - <b>Computer</b>:         DESKTOP-HLPRRTA
  * - <b>User</b>:             webering
  *
  * No user-provided resource definitions were used to generate this driver.
  *
  * No user-provided procedure definitions were used to generate this driver.
  *
  * Do not edit the generated source code files other than temporarily for debug purposes. Any
  * modifications will be overwritten by the Sensor Controller Studio when generating new output.
  *
  * \section section_drv_modules Driver Modules
  * The driver is divided into three modules:
  * - \ref module_scif_generic_interface, providing the API for:
  *     - Initializing and uninitializing the driver
  *     - Task control (for starting, stopping and executing Sensor Controller tasks)
  *     - Task data exchange (for producing input data to and consume output data from Sensor Controller
  *       tasks)
  * - \ref module_scif_driver_setup, containing:
  *     - The AUX RAM image (Sensor Controller code and data)
  *     - I/O mapping information
  *     - Task data structure information
  *     - Driver setup data, to be used in the driver initialization
  *     - Project-specific functionality
  * - \ref module_scif_osal, for flexible OS support:
  *     - Interfaces with the selected operating system
  *
  * It is possible to use output from multiple Sensor Controller Studio projects in one application. Only
  * one driver setup may be active at a time, but it is possible to switch between these setups. When
  * using this option, there is one instance of the \ref module_scif_generic_interface and
  * \ref module_scif_osal modules, and multiple instances of the \ref module_scif_driver_setup module.
  * This requires that:
  * - The outputs must be generated using the same version of Sensor Controller Studio
  * - The outputs must use the same operating system
  * - The outputs must use different source code prefixes (inserted into all globals of the
  *   \ref module_scif_driver_setup)
  *
  *
  * \section section_project_info Project Description
  * Reads various sensors on the IMS IMUv6 Board
  *
  *
  * \subsection section_io_mapping I/O Mapping
  * Task I/O functions are mapped to the following pins:
  * - IMUv6 Sensor Task:
  *     - <b>A: adcpin</b>: DIO28
  *     - <b>I2C SCL</b>: DIO1
  *     - <b>I2C SDA</b>: DIO0
  *     - <b>SPI CSN: SPI Accelerometer</b>: DIO27
  *     - <b>SPI MISO</b>: DIO24
  *     - <b>SPI MOSI</b>: DIO25
  *     - <b>SPI SCLK</b>: DIO26
  *
  *
  * \section section_task_info Task Description(s)
  * This driver supports the following task(s):
  *
  *
  * \subsection section_task_desc_imuv6_sensor_task IMUv6 Sensor Task
  * Reads the values of various sensors
  *
  */




/** \addtogroup module_scif_driver_setup Driver Setup
  *
  * \section section_driver_setup_overview Overview
  *
  * This driver setup instance has been generated for:
  * - <b>Project name</b>:     IMS IMUv6 Sensor Reader
  * - <b>Code prefix</b>:      -
  *
  * The driver setup module contains the generated output from the Sensor Controller Studio project:
  * - Location of task control and scheduling data structures in AUX RAM
  * - The AUX RAM image, and the size the image
  * - Task data structure information (location, size and buffer count)
  * - I/O pin mapping translation table
  * - Task resource initialization and uninitialization functions
  * - Hooks for run-time logging
  *
  * @{
  */
#ifndef SCIF_H
#define SCIF_H

#include <stdint.h>
#include <stdbool.h>
#include "scif_framework.h"
#include "scif_osal_tirtos.h"


/// Target chip name
#define SCIF_TARGET_CHIP_NAME_CC2652R1F
/// Target chip package
#define SCIF_TARGET_CHIP_PACKAGE_QFN48_7X7_RGZ

/// Number of tasks implemented by this driver
#define SCIF_TASK_COUNT 1

/// IMUv6 Sensor Task: Task ID
#define SCIF_IMUV6_SENSOR_TASK_TASK_ID 0


/// IMUv6 Sensor Task: 
#define SCIF_IMUV6_SENSOR_TASK_ADXL355_AXIS_COUNT 3
/// IMUv6 Sensor Task: How many 16bit words are in the axis'?
#define SCIF_IMUV6_SENSOR_TASK_ADXL355_AXIS_WORDS 6
/// IMUv6 Sensor Task: i2c address of the adxl355 accelerometer (normal addr would be 0x1D)
#define SCIF_IMUV6_SENSOR_TASK_ADXL355_I2C_ADDR 29
/// IMUv6 Sensor Task: 
#define SCIF_IMUV6_SENSOR_TASK_ADXL355_SPI_READ 1
/// IMUv6 Sensor Task: 
#define SCIF_IMUV6_SENSOR_TASK_ADXL355_SPI_WRITE 0
/// IMUv6 Sensor Task: 
#define SCIF_IMUV6_SENSOR_TASK_BAROM_I2C_ADDR 118
/// IMUv6 Sensor Task: Charging termination current in 0.1 mA (e.g. 24 == 2.4 mA)
#define SCIF_IMUV6_SENSOR_TASK_BATTERY_CHARGE_TERMINATION_CURRENT 24
/// IMUv6 Sensor Task: Charge termination current, scaled to CSP-CSN voltage ADV LSBs (1.5625 uV per LSB)
#define SCIF_IMUV6_SENSOR_TASK_BATTERY_CHARGE_TERMINATION_REG_VALUE 15
/// IMUv6 Sensor Task: Designed Capacity in mAh
#define SCIF_IMUV6_SENSOR_TASK_BATTERY_DESIGNED_CAP 120
/// IMUv6 Sensor Task: 
#define SCIF_IMUV6_SENSOR_TASK_BATTERY_DESIGNED_CAP_DIV_BY_32 3
/// IMUv6 Sensor Task: 1 LSB = 0.5mA with a 0.010Î© sense resistor.
#define SCIF_IMUV6_SENSOR_TASK_BATTERY_DESIGNED_CAP_REGISTER_VALUE 240
/// IMUv6 Sensor Task: In mV
#define SCIF_IMUV6_SENSOR_TASK_BATTERY_EMPTY_VOLTAGE 3000
/// IMUv6 Sensor Task: 
#define SCIF_IMUV6_SENSOR_TASK_BATTERY_EMPTY_VOLTAGE_AND_BATTERY_RECOVERY_VOLTAGE_REGISTER_VALUE 38497
/// IMUv6 Sensor Task: In mV
#define SCIF_IMUV6_SENSOR_TASK_BATTERY_RECOVERY_VOLTAGE 3880
/// IMUv6 Sensor Task: Battery current sense resistor in mOhm, used only for calculating charge termination current
#define SCIF_IMUV6_SENSOR_TASK_BATTERY_SENSE_RESISTOR 10
/// IMUv6 Sensor Task: 
#define SCIF_IMUV6_SENSOR_TASK_BMI160_ACCEL_AXIS_COUNT 3
/// IMUv6 Sensor Task: 
#define SCIF_IMUV6_SENSOR_TASK_BMI160_GYRO_AXIS_COUNT 3
/// IMUv6 Sensor Task: 
#define SCIF_IMUV6_SENSOR_TASK_BMI160_I2C_ADDR 104
/// IMUv6 Sensor Task: 
#define SCIF_IMUV6_SENSOR_TASK_CONFIG_ENABLE_ADXL355_ACCEL_BV 4
/// IMUv6 Sensor Task: 
#define SCIF_IMUV6_SENSOR_TASK_CONFIG_ENABLE_ANALOG_BV 32
/// IMUv6 Sensor Task: 
#define SCIF_IMUV6_SENSOR_TASK_CONFIG_ENABLE_BAROMETER_BV 16
/// IMUv6 Sensor Task: 
#define SCIF_IMUV6_SENSOR_TASK_CONFIG_ENABLE_BATTERY_BV 64
/// IMUv6 Sensor Task: 
#define SCIF_IMUV6_SENSOR_TASK_CONFIG_ENABLE_BMI160_ACCEL_BV 1
/// IMUv6 Sensor Task: 
#define SCIF_IMUV6_SENSOR_TASK_CONFIG_ENABLE_BMI160_GYRO_BV 2
/// IMUv6 Sensor Task: 
#define SCIF_IMUV6_SENSOR_TASK_CONFIG_ENABLE_MAGNETOMETER_BV 8
/// IMUv6 Sensor Task: 
#define SCIF_IMUV6_SENSOR_TASK_KX1221037_AXIS_COUNT 3
/// IMUv6 Sensor Task: 
#define SCIF_IMUV6_SENSOR_TASK_KX1221037_I2C_ADDR 31
/// IMUv6 Sensor Task: Fuel Gauge I2C Address
#define SCIF_IMUV6_SENSOR_TASK_MAX17055_I2C_ADDR 54
/// IMUv6 Sensor Task: 
#define SCIF_IMUV6_SENSOR_TASK_MMC34160PJ_AXIS_COUNT 3
/// IMUv6 Sensor Task: I2C Address of the Magnetometer MMC34160PJ
#define SCIF_IMUV6_SENSOR_TASK_MMC34160PJ_I2C_ADDR 48
/// IMUv6 Sensor Task I/O mapping: adcpin
#define SCIF_IMUV6_SENSOR_TASK_DIO_A_ADC_READ 28
/// IMUv6 Sensor Task I/O mapping: I2C SCL
#define SCIF_IMUV6_SENSOR_TASK_DIO_I2C_SCL 1
/// IMUv6 Sensor Task I/O mapping: I2C SDA
#define SCIF_IMUV6_SENSOR_TASK_DIO_I2C_SDA 0
/// IMUv6 Sensor Task I/O mapping: SPI Accelerometer
#define SCIF_IMUV6_SENSOR_TASK_DIO_SPI_CSN_ADXL355 27
/// IMUv6 Sensor Task I/O mapping: SPI MISO
#define SCIF_IMUV6_SENSOR_TASK_DIO_SPI_MISO 24
/// IMUv6 Sensor Task I/O mapping: SPI MOSI
#define SCIF_IMUV6_SENSOR_TASK_DIO_SPI_MOSI 25
/// IMUv6 Sensor Task I/O mapping: SPI SCLK
#define SCIF_IMUV6_SENSOR_TASK_DIO_SPI_SCLK 26


// All shared data structures in AUX RAM need to be packed
#pragma pack(push, 2)


/// IMUv6 Sensor Task: Task configuration structure
typedef struct {
    uint16_t batterySamplingInterval; ///< How many timer ticks to wait between sampling battery information
    uint16_t resetSensors;            ///< reset sensors when != 0
    uint16_t sensorConfig;            ///< Determines which sensors should be enabled or disabled
    uint16_t sensorConfigOld;         ///< Previous value of sensorConfig, used for tracking state changes to enable/disable sensors
} SCIF_IMUV6_SENSOR_TASK_CFG_T;


/// IMUv6 Sensor Task: Task output data structure
typedef struct {
    uint16_t adcValue;              ///< analog external sensor exposed pads 
    int16_t  adxl355axis[6];        ///< ADXL355 Axis values x[0:1], y[0:1], z[0:1]
    uint16_t batteryCapacity;       ///< 
    uint16_t batteryCapacityFull;   ///< Battery capacity in units of 0.5 mAh per LSB (with 0.01 Ohm sense resistor)
    int16_t  batteryCurrent;        ///< Battery current in steps of 156.25 uA per LSB (with 0.01 Ohm sense resistor)
    int16_t  batteryCurrentAverage; ///< Battery current (averaged over time) in steps of 156.25 uA per LSB (with 0.01 Ohm sense resistor)
    uint16_t batteryStateOfCharge;  ///< 
    uint16_t batteryVoltage;        ///< Battery voltage in steps of 0.078125 mV per LSB
    int16_t  bmi160accelaxis[3];    ///< BMI160 acceleration axis (x,y,z)
    int16_t  bmi160gyroaxis[3];     ///< BMI160 Gyroscope Axis (x,y,z)
    uint16_t mmc34160pjaxis[3];     ///< Magnetometer
    uint16_t pressure;              ///< barometer air pressure
    uint16_t temp;                  ///< temperature
} SCIF_IMUV6_SENSOR_TASK_OUTPUT_T;


/// IMUv6 Sensor Task: Task state structure
typedef struct {
    uint16_t batterySamplingWaitCount; ///< 
    uint16_t i2cStatus;                ///< I2C master status
    uint16_t status;                   ///< 
} SCIF_IMUV6_SENSOR_TASK_STATE_T;


/// Sensor Controller task data (configuration, input buffer(s), output buffer(s) and internal state)
typedef struct {
    struct {
        SCIF_IMUV6_SENSOR_TASK_CFG_T cfg;
        SCIF_IMUV6_SENSOR_TASK_OUTPUT_T output;
        SCIF_IMUV6_SENSOR_TASK_STATE_T state;
    } imuv6SensorTask;
} SCIF_TASK_DATA_T;

/// Sensor Controller task generic control (located in AUX RAM)
#define scifTaskData    (*((volatile SCIF_TASK_DATA_T*) 0x400E015C))


// Initialized internal driver data, to be used in the call to \ref scifInit()
extern const SCIF_DATA_T scifDriverSetup;


// Restore previous struct packing setting
#pragma pack(pop)


// AUX I/O re-initialization functions
void scifReinitTaskIo(uint32_t bvTaskIds);


// RTC-based tick generation control
void scifStartRtcTicks(uint32_t tickStart, uint32_t tickPeriod);
void scifStartRtcTicksNow(uint32_t tickPeriod);
void scifStopRtcTicks(void);


#endif
//@}


// Generated by DESKTOP-HLPRRTA at 2022-06-21 17:28:19.282
